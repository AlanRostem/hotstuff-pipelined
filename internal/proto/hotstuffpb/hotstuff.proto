syntax = "proto3";

package hotstuffpb;

import "gorums.proto";

import "google/protobuf/empty.proto";

option go_package = "github.com/relab/hotstuff/internal/proto/hotstuffpb";

service Hotstuff {
  rpc Propose(Proposal) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc Vote(PartialCert) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc Timeout(TimeoutMsg) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc NewView(SyncInfo) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc Fetch(BlockHash) returns (Block) { option (gorums.quorumcall) = true; }

  rpc PipedPropose(PipedProposal) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc PipedVote(PipedPartialCert) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc PipedTimeout(PipedTimeoutMsg) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc PipedNewView(PipedSyncInfo) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc PipedFetch(PipedBlockHash) returns (Block) { option (gorums.quorumcall) = true; }

  rpc TestPiped(PipedMessage) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }
}

message PipedMessage {
  uint32 PipeId = 1;
  string Message = 2;
}

message PipedProposal {
  uint32 PipeId = 1;
  Proposal Proposal = 2;
}

message PipedPartialCert {
  uint32 PipeId = 1;
  PartialCert PartialCert = 2;
}

message PipedTimeoutMsg {
  uint32 PipeId = 1;
  TimeoutMsg TimeoutMsg = 2;
}

message PipedSyncInfo {
  uint32 PipeId = 1;
  SyncInfo SyncInfo = 2;
}

message PipedBlockHash {
  uint32 PipeId = 1;
  BlockHash BlockHash = 2;
}


message Proposal {
  Block Block = 1;
  AggQC AggQC = 2;
}

message BlockHash { bytes Hash = 1; }

message Block {
  bytes Parent = 1;
  QuorumCert QC = 2;
  uint64 View = 3;
  bytes Command = 4;
  uint32 Proposer = 5;
}

message ECDSASignature {
  uint32 Signer = 1;
  bytes R = 2;
  bytes S = 3;
}

message BLS12Signature { bytes Sig = 1; }

message EDDSASignature {
  uint32 Signer = 1;
  bytes Sig = 2;
 }

message Signature {
  oneof Sig {
    ECDSASignature ECDSASig = 1;
    BLS12Signature BLS12Sig = 2;
    EDDSASignature EDDSASig = 3;
  }
}

message PartialCert {
  QuorumSignature Sig = 1;
  bytes Hash = 2;
}

message ECDSAMultiSignature { repeated ECDSASignature Sigs = 1; }

message EDDSAMultiSignature {repeated EDDSASignature Sigs = 1;}

message BLS12AggregateSignature {
  bytes Sig = 1;
  bytes participants = 2;
}

message QuorumSignature {
  oneof Sig {
    ECDSAMultiSignature ECDSASigs = 1;
    BLS12AggregateSignature BLS12Sig = 2;
    EDDSAMultiSignature EDDSASigs =3;
  }
}

message QuorumCert {
  QuorumSignature Sig = 1;
  uint64 View = 2;
  bytes Hash = 3;
}

message TimeoutCert {
  QuorumSignature Sig = 1;
  uint64 View = 2;
}

message TimeoutMsg {
  uint64 View = 1;
  SyncInfo SyncInfo = 2;
  QuorumSignature ViewSig = 3;
  QuorumSignature MsgSig = 4;
}

message SyncInfo {
  QuorumCert QC = 1;
  TimeoutCert TC = 2;
  AggQC AggQC = 3;
}

message AggQC {
  map<uint32, QuorumCert> QCs = 1;
  QuorumSignature Sig = 2;
  uint64 View = 3;
}
